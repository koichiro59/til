〇バージョン管理を行う

〇以前の状態に戻せる

〇チームでの開発がスムーズに

- いつ、誰が、どんな内容を変更したかわかるため思わぬ上書きを防止できる

**github**

〇コードの共有を行う

〇コードレビューを行う（コードチェック）

〇git init

初期化、ローカルにリポジトリを作成

このコマンドによって、gitでバージョン管理ができるようになる

〇git add/commit

記録、ステージング環境にしてから記録する

〇git diff/status

状況確認、差分の確認と変更ファイルの確認

〇git log

変更履歴の確認

〇git restore

変更を元に戻す

〇ブランチは、元のフォルダにラベル（名前）を付けて分岐させる

〇git branch　ブランチ名

→新規にブランチを作成

〇git branch 

→ブランチの一覧を表示

〇git switch ブランチ名

→ブランチを切り替える

〇git merge ブランチ名

→ブランチの変更内容を取り込む

〇git HEAD 

→現在のブランチを指す

〇コンフリクト

ブランチしたフォルダで、同じ箇所に対してそれぞれ別の内容を変更した時、エラー（コンフリクト）が起きる

〇プッシュ

github上にコードをアップすること

基本はローカルでコミットした内容を、githubにプッシュする

git push リモートリポジトリ名　ブランチ名

〇プル

githubからローカルにコードを取り込むこと。プルはローカルリポジトリにも手元のコードにも変更内容が取り込まれる。プッシュの反対

git pull リモートリポジトリ名　ブランチ名

〇fetch

githubからローカルリポジトリにコードを取り込むこと。ただし手元のファイルは変更されない。そのため、fetch＋mergeで完全に変更させる

git fetch リモートリポジトリ名

〇pullとfetch.mergeの使い分け

pullは最新状況を反映させたいときに使い、特に変更内容などないときに使用する。pullで変更した内容を元に戻すには時間がかかる

fetch.mergeはブランチで作業して、差分がありコンフリクトが起きそうな状況で安全に変更するため使用させる。